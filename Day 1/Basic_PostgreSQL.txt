
-- Create Students Table
CREATE TABLE students (
    student_id SERIAL PRIMARY KEY,
    student_name VARCHAR(100) NOT NULL
);

-- Create Courses Table
CREATE TABLE courses (
    course_id SERIAL PRIMARY KEY,
    course_name VARCHAR(100) NOT NULL,
    student_id INT REFERENCES students(student_id),
    subject VARCHAR(50) NOT NULL,
    marks INT NOT NULL
);

-- Insert into students
INSERT INTO students (student_name) VALUES
('Alice Johnson'),
('Brian Smith'),
('Catherine Lee'),
('David Miller');

-- Insert into courses
INSERT INTO courses (course_name, student_id, subject, marks) VALUES
('Mathematics', 1, 'Math', 88),
('Physics', 2, 'Science', 76),
('Literature', 3, 'English', 91),
('History', 4, 'Social', 85),
('Biology', 2, 'Science', 82);

-- Simple select
SELECT * FROM courses;

-- Order by marks descending
SELECT course_name, marks FROM courses ORDER BY marks DESC;

-- Filter by subject
SELECT * FROM courses WHERE subject = 'Science';

-- Courses with marks > 80
SELECT course_name FROM courses WHERE marks > 80;

-- Pattern match
SELECT course_name FROM courses WHERE course_name ILIKE '%t%';

-- Inner Join to see course and student names
SELECT c.course_name, s.student_name
FROM courses c
INNER JOIN students s ON c.student_id = s.student_id;

-- Average marks per student
SELECT s.student_name, AVG(c.marks) AS avg_marks
FROM courses c
JOIN students s ON c.student_id = s.student_id
GROUP BY s.student_name;

-- Update marks of a course
UPDATE courses SET marks = 90 WHERE course_name = 'History';

-- Delete a course
DELETE FROM courses WHERE course_name = 'Physics';

-- Drop both tables
DROP TABLE courses;
DROP TABLE students;
